import { autorun, action, when, makeAutoObservable } from 'mobx'

import { CustomerSearch } from 'models/core/search/CustomerSearch'
import { LabelSearch } from 'models/core/search/LabelSearch'
import { MacroSearch } from 'models/core/search/MacroSearch'
import { UserSearch } from 'models/core/search/UserSearch'
import { TicketSearch } from 'models/core/search/TicketSearch'
import { Ticket } from 'models/core/Ticket'
import { TicketsModal } from 'models/ui/TicketsModal'
import { app } from 'app'

export class InboxTab {
  draft

  ticket

  snoozeItems

  activeFolder

  showFolderPage

  customerProfileEditorOpen

  isSavedSearch

  customSnooze

  constructor() {
    makeAutoObservable(this, {
      activateFolder: action,
      setTicket: action,
      setupDraft: action,
    })

    // StateDropdown
    this.snoozeItems = [
      { label: '4 Hours', code: '4-hours' },
      { label: 'Tomorrow Morning', code: 'next-day-8am' },
      { label: 'Tomorrow Afternoon', code: 'next-day-1pm' },
      { label: '2 Days', code: '2-days' },
      { label: '4 Days', code: '4-days' },
      { label: '1 Week', code: '1-week' },
      { label: '2 Weeks', code: '2-weeks' },
    ]

    this.customSnooze = null

    this.ticketBoilerplate = {
      id: 'new',
      state: 'draft',
      user_id: null,
      subject: '',
      type: 'email',
      bodyPrefix: '',
      customer_id: '',
    }

    when(
      () => app.initialized,
      () => this.initialize()
    )
  }

  initialize() {
    this.labelSearch = new LabelSearch()
    this.macroSearch = new MacroSearch()
    this.userSearch = new UserSearch()
    this.customerSearch = new CustomerSearch()
    this.ticketSearch = new TicketSearch()
    this.ticketsModal = new TicketsModal()
    this.isSavedSearch = false

    autorun(() => {
      // Accessing router path ensures ID changes will run this
      if (this.active && app.router.route.path) {
        if (this.folderPageIsActive) {
          this.activateFolder()
        } else if (this.ticketPageIsActive) {
          this.setTicket()
        } else if (this.draftPageIsActive) {
          this.setupDraft()
        }
      }
    })
  }

  get active() {
    return app.router.primaryPath === 'inbox'
  }

  get activePage() {
    return app.router.secondaryPath
  }

  get folderPageIsActive() {
    return this.activePage === 'folder' || app.router.route.name === 'inbox'
  }

  get ticketPageIsActive() {
    return this.activePage === 'ticket'
  }

  get draftPageIsActive() {
    return ['draft', 'draftInbox', 'split', 'forward'].includes(this.activePage)
  }

  get draftMode() {
    return this.activePage
  }

  setTicket() {
    if (this.preLoadedTicket && this.preLoadedTicket.id === app.router.route.params.id) {
      this.ticket = this.preLoadedTicket
    } else {
      this.ticket = new Ticket({ id: app.router.route.params.id, state: 'open' })
    }
    this.preLoadedTicket = null
    this.ticket.load({ embedCustomer: true })
    if (this.activeFolder) {
      this.activeFolder.setActiveTicket(app.router.route.params.id)
    }
  }

  activateFolder() {
    if (app.router.route.name === 'inbox.folder') {
      this.activeFolder = app.folders[app.router.route.params.id]
    }

    // if no folder was found yet, pick first one
    if (!this.activeFolder || app.router.route.name === 'inbox') {
      let firstFolder
      if (app.unifiedInbox) {
        firstFolder = app.unifiedInbox.folders.find(f => f.autogenerated !== true)
      }
      if (firstFolder === undefined) {
        // eslint-disable-next-line prefer-destructuring
        firstFolder = app.inboxes[0].folders[0]
      }
      this.activeFolder = firstFolder
      app.router.navigate('inbox.folder', { id: firstFolder.id }, { replace: true })
    }
    this.showFolderPage = true
  }

  setPreLoadedTicket(ticket) {
    this.preLoadedTicket = new Ticket(ticket)
  }

  genDraftFields(fields) {
    const preLoadDraftfields = { ...this.ticketBoilerplate }
    Object.entries(fields).forEach(field => {
      const [key, newValue] = field
      preLoadDraftfields[key] = newValue
    })
    return preLoadDraftfields
  }

  setupDraft() {
    if (this.draft && this.draft.id !== 'new' && this.draft.id === app.router.route.params.id) return

    if (app.router.route.params.id !== 'new') {
      this.draft = new Ticket({ id: app.router.route.params.id, state: 'draft' })
      this.draft.load({ embedCustomer: true })

      // TODO add code to handle forward and split drafts here
      return
    }

    switch (true) {
      case app.router.route.name === 'inbox.split':
        this.draft = new Ticket(
          this.genDraftFields({
            inbox_id: app.ui.inboxTab.ticket.inbox_id,
            customer_id: app.ui.inboxTab.ticket.customer_id,
            customer_name: app.ui.inboxTab.ticket.customer_name,
            customer_avatar_url: app.ui.inboxTab.ticket.customer_avatar_url,
          })
        )
        this.draft.customer = app.ui.inboxTab.ticket.customer
        break
      case app.router.route.name === 'inbox.forward':
        this.draft = new Ticket(
          this.genDraftFields({
            inbox_id: app.ui.inboxTab.ticket.inbox_id,
            subject: `Fwd: ${app.ui.inboxTab.ticket.subject}`,
          })
        )
        break
      case app.router.route.name === 'inbox.draftInbox':
        this.draft = new Ticket(this.genDraftFields({ inbox_id: app.router.route.params.inbox_id }))
        break
      default:
        this.draft = new Ticket(this.genDraftFields({ inbox_id: app.currentUser.default_group_id }))
    }
  }

  updateDraftUrl(draftId) {
    // Will have to naviate here and then catch later on that we are on the same draft
    // when we naviate away from draft page, draft needs to reset to null => perhaps a reaction or handle it in other places
    switch (true) {
      case app.router.route.name === 'inbox.split':
        app.router.navigate(
          'inbox.split',
          {
            id: draftId,
            ticket_id: app.router.route.params.ticket_id,
            message_id: app.router.route.params.message_id,
          },
          { replace: true }
        )
        return
      case app.router.route.name === 'inbox.forward':
        app.router.navigate(
          'inbox.forward',
          { id: draftId, ticket_id: app.router.route.params.ticket_id },
          { replace: true }
        )
        return
      default:
        app.router.navigate('inbox.draft', { id: draftId }, { replace: true })
    }
  }

  setCustomSnooze(value) {
    this.customSnooze = value
  }
}

// On SPA init..  router redirects to first folder
// Inbox Tab is activated:              app.ui.inboxTab.active = true
// Active View is folder:               app.ui.inboxTab.activePage = folder
// First Folder is activated:           app.inboxes.first.folders.first.active = true
// Data is loaded for folder:           app.inboxes.first.folders.first.loaded = true

// When a ticket is clicked in the folder
// Ticket is given to InboxTab          app.ui.inboxTab.ticket = new Ticket
// Ticket View is activated             app.ui.inboxTab.activePage = ticket
// Ticket data is loaded                app.ui.inboxTab.ticket.loaded = true

// Back button tells router to go back, router redirects to the last URL
// Active View is updated               app.ui.inboxTab.activePage = folder
// Ticket is still loaded, just hidden

// Another ticket is clicked in the folder
// old data is cleaned up               app.ui.inboxTab.ticket.destroy()
//                                      app.ui.inboxTab.customer.destroy()
// new ticket added                     app.ui.inboxTab.ticket = new Ticket
// Ticket View is activated             app.ui.inboxTab.activePage = ticket
// Ticket data is loaded                app.ui.inboxTab.ticket.loaded = true
